Livro: Engenharia de Software Moderna

# Capítulo 1

### Engenharia de Requisitos
  - funcionais: o que um sistema deve fazer (funcionalidades e serviços)
  - não funcionáis: como um sistema deve operar, sob quais restrições e com qual qualidade (desempenho, disponibilidade, tolerância a falhas, segurança, privacidade...)

### Projeto de Software
  São definidas as principais unidades de códigos, entretanto apenas no nível de interfaces.
  - Interfaces providas: serviços que uma unidade de código tona público para uso pelo resto do sistema
  - Interfaces requeridas: uma unidade de código depende para funcionar (dependência)

    |class ContaBancaria {
    |   private Cliente cliente;
    |   private double saldo;
    |   public double getSaldo() { ... }
    |   public String getNomeCliente() { ... }
    |   public String getExtrato (Date inicio) { ... }
    |   ...
    |}
  "Quando o projeto é realizado em um nível mais alto e as unidades de código possuem maior granularidade — são pacotes, por exemplo — ele é classificado como um projeto arquitetural. 
   Ou seja, arquitetura de software trata da organização de um sistema em um nível de abstração mais alto do que aquele que envolve classes ou construções semelhantes."

### Construção de Software
  "Nesse momento, existem diversas decisões que precisam ser tomadas, como, por exemplo: 
    - definir os algoritmos e estruturas de dados que serão usados, 
    - definir os frameworks e bibliotecas de terceiros que serão usados; 
    - definir técnicas para tratamento de exceções; 
    - definir padrões de nomes, 
    - leiaute e documentação de código

   e, por último, mas não menos importante, 
    - definir as ferramentas que serão usadas no desenvolvimento, 
    - incluindo compiladores, 
    - ambientes integrados de desenvolvimento (IDEs), 
    - depuradores, 
    - gerenciadores de bancos de dados, 
    - ferramentas para construção de interfaces, etc."

### Teste de Software
  Tipos de teste
   - unidade: quando se testa uma pequena unidade do código, como uma classe ou método
   - integração: quando se testa uma unidade de mais granularidade, como um conjunto de classes
   - performance: quando se submete o sistema a uma carga de processamento para verificar seu desempenho
   - usabilidade: quando o objeto é verificar a usabilidade da interface do sistema

  Testes podem ser usados tanto para verificação quanto para validação de sistemas
   - veriicação: estamos implementando o sistema corretamente? De acordo com seus requisitos.
   - validação: estamos implementando o sistema correto? Aquele que os clientes ou o mercado está querendo.

### Manutenção e Evolução de Software
  Tipos de manutenção
   - corretiva: corrigir bugs reportados por usuário ou outros desenvolvedores
   - preventiva: corrigir bugs latentes no código, que ainda nao causaram falhas junto aos usuários do sistema
   - adaptatva: adaptar um sistema a uma mudança em seu ambiente, incluindo tecnologia, legislação, regras de integração com outros sistemas ou demandas de novos clientes
   - refactoring: modificações realizadas em um software preservando seu comportamento e visando exclusivamente a melhoria de seu código ou projeto
   - evolutiva: incluir uma nova funcionalidade ou introduzir aperfeiçoamentos importantes em funcionalidades existentes

### Gerência de Configuração
  Inclui a definição de um conjunto de políticas para gerenciar as diversas versões de um sistema. 
  - Versionamento semântico: utilização de padrões para a versão do software (x.y.z)
    - modificações em z são chamados de patchs e ocorrem por correções pequenas de bugs
    - modificações em y são chamadas de minor e ocorrem pela implementação de pequenas funcionalidades
    - modificações em x são chamadas de major e ocorrem pela implemetação de funcionalidades muito diferentes das existentes

### Gerência de Projetos
  - Stakeholder: as partes interessadas no projeto, são afetados ou afetam o projeto
  - Lei de Brooks: "A inclusão de novos desenvolvedores em um projeto que está atrasado contribui para torná-lo ainda mais atrasado"

### Processos de Desenvolvimento de Software
  Tipos e processos
    - Waterfall (cascata)
    - Ágeis (incrementais ou iterativos)
      - Métodos ágeis: XP, Scrum, Kanban e Lean Development
        - Os métodos ágeis ajudaram a disseminar diversas práticas de desenvolvimenoto como testes automatizados, test-driven development e continuous integration

### Modelos de Software
  - Oferece uma representação em mais alto nível de um sistema do que o seu código fonte.
  - Permitir que desenvolvedores possam analisar propriedades e características essenciais de um sistema, de modo mais fácil e rápido, sem ter que visualizar o código em si.
  - Ex: UML (diagrama de classes)

### Qualidade de Software
  - Qualidade externa
    - considera fatores que podem ser aferidos sem analisar o código, podendo ser avaliada mesmo por usuários comuns. 
     - Correção: o software atende à sua especificação? Nas situações normais, ele funciona como esperado?
     - Robustez: o software continua funcionando mesmo quando ocorrem eventos anormais como uma falha de comunicação ou disco?
     - Eficiência: o software faz bom uso de recursos computacionais?
     - Portabilidade: é possível portar esse software em outras plataformas e so?
     - Facilidade de uso: o software possui uma interface amigável, mensagens de erro claras, suporta mais de uma língua?
     - Compatibilidade: o software é compatível com os principal formatos de dados de sua área? (xls, csv)

  - Qualidade interna
    - Considera propriedades e características relacionadas com a implementação de um sistema podendo ser avaliada somente por um especialista em Engenharia de Software
    - Os atributos a serem medidos a respeito da qualidade do software é a modularidade, legibilidade, manutenabilidade e testabilidade
    - Uma as maneiras de garantir a qualidade interna do código é a revisão de código de um programador A no código do programado B

### Prática Profissional
  - Código de ética

### Aspectos Econômicos
  - Precificação de sistemas (licença ou anúncio)
  - Corrigir bug (manter carteira de clientes) X Desenvolver novas funcionalidades (expandir carteira de clientes)

### Classificação de Sistemas de Software
  - Acute
    - Sistemas críticos aos quais qualquer falha que seja encontrada pode causar imenso prejuízo, podendo incluir a perda de vidas humanas.
    - Pode ser usado redundancia não apenas de hardware mas também de software, no caso uma decisão só será tomada se o conjuntos de maquinas rodando o software retornarem a mesma decisão
  - Business
    - Sistemas de modo geral que são utilizados e comercializados
  - Casuais
    - Sistemas pequenos e não críticos que normalmente são desenvolvidor por poucas pessoas e que normalmente contêm alguns bugs

# Capítulo 2

### Importância de Preocessos
  - Processos de software são importântes desde que utilizados em equipes de desenvolvedores que desenvolvem software mais complexos
  - Processos servem para coordenar, motivar, organizar e avaliar o trabalho de seus desenvolvedores 
  - Garantindo que os desenvolvedores trabalhem com produtividade e produza sistemas alinhados com os objetivos da organização

### Manidesto Ágil
  - Modelo Waterfall
    - Os processos iniciais de desenvolvimento de software baseavam-se em engenharias já existentes na época e que eram totalmente sequenciais
    - As fases do desenvolvimento eram mas não se limitavam a: especificação de requisitos, implementação, testes e manutenção do sistema
    - Todas as etapas geravam documentações detalhadas do produto

  - Em 2001, um grupo de profissioais se reuniu em Snowbird, estado de Utah, para discutir e propor uma alternativa aos processos do tipo Waterfall
    - Reconheceram que os requisitos de um software mudam com frequência, logo é possível projetar por anos e quando pronto não ser mais necessário ou não possuir uma adesão ao processo levantado
    - As documentações geradas nos processos waterfall se desatualizavam rapidamente visto que os desenvolvedores não as atualizavam após mudanças no sistema

  - Manifesto Ágil
    Cadascterísticas fundamentais do ágil
    - Indivíduos e interações maior que processos e ferramentas
    - Software em funcionamento maior que documentação abrangente
    - Colaboração com o cliente maior que negociação de contratos
    - Resposta a mudanças maior que seguir um plano

    Outras características atuais
    - Menor ênfase em documentação
    - Menor ênfase em planos detalhados
    - Inexistência de uma fase dedicada a design
    - Desenvolvimento em times pequenos
    - Programação em pares, testes automatizados e integração contínua

    - Ciclos curtos e iterativos de desenvolvimento (um mês ou menos)
      - É implementado o que o cliente mais necessita de urgente primeiro

### Extreme Programming
  - XP é um método leve recomentado para desenvolver software com requisitos vagos ou sujeitos a mudanças
  - XP não é um método que define um passo a passo, em vez disso ele é definido por um conjunto de valores, princípios e práticas de desenvolvimento

  - Valores
    - *comunicação: é de conhecimento geral a importância da comunicação;
    - *simplicidade: manter o códido simples é importânte para a legibilidade e manutenabilidade de um software;
    - *feedback: estar apto e aberto a receber feedbacks é importante visto que é uma forma barata e fácil de manter a evolução tanto do projeto quanto pessoal;
    - coragem,
    - respeito,
    - qualidade de vida

  - Princípios
    - humanidade: software utiliza de uma grande quantidade de capital humano, sendo assim é importante que se tenha uma boa gestão de pessoas; 
    - economicidade: software não é uma obra de arte, é necessário garantir que o que é escrito gere valor para o cliente;
    - benefícios mútuos: basicamente o título, é necessário gerar cenários de benefício mútuo por exemplo: um dev A escreve testes que por sua vez são utilizados por um dev B que dá manutenção e tem a segurança de faze-lo;
    - melhorias contínuas: Não se deve investir grande tempo em um design inicial e completo, em vez disso o design do sistema pode ser incremental, melhorando a cada iteração;
    - falhas acontecem: software é uma atividade de construção humana e humanos estão suscetíveis a falhas, logo não se deve punir um membro do time por errar mas as falhas também não devem ser acobertadas;
    - baby steps: É melhor um progesso seguro, testado e validado, mesmo que pequeno, do que grandes implementações com riscos de serem descartadas;
    - responsabilidade pessoal: os desenvolvedores devem ter uma ideia clara de seu papel e responsabilidade na equipe;

  - Práticas sobre o Processo de Desenvolvimento
    - representante dos clientes (user proxy), 
      - deve entender do domínio do sistema que será constrído, é o responsável por escrever as histórias dos usuários
    
    - histórias dos usuários, 
      - nome que XP dá para os documentos que descrevem os requisitos do sistema a ser implementados, essas histórias são documentos resumidos, com apenas duas ou três sentenças
        
    - planning poker, 
      - técnica usada para estimar o tamanho das histórias: o representante dos clientes lê a história para os desenvolvedores, após os desenvolvedores questionam o representante a fim de sanar dúvidas
        ao terem as dúvidas sanadas cara desenvolvedor dá uma pontuação para a história, caso não haja consenso os desenvolvedores distutem entre si a fim de votar novamente e terem uma nova pontuação
        
    - iterações,
       - a implementação das histórias ocorre em iterações as quais têm uma duração fixa e bem definida, variando de uma a três semanas. as iterações formam ciclos mais longos chamados de releases
        
    - releases, 
      - conjunto de iterações com período de dois a três meses onde o representante do cliente irá listar histórias que possam ocupar uma release
        
    - planejamento de releases (planning game), 
      - o representante do cliente deve priorizar as histórias, para isso, ele deve definir quais histórias serão implementadas nas iterações da primeira release
        
    - planejamento de iterações, 
      - as iterações são organizadas conforme a velocidade do time, ou seja, quantos story points o time consegue resolver em uma iteração
      - ao planejar a iteração o time de desenvolvimento deverá decompor as historias em tarefas as quais devem corresponder a atividade de programação que possam ser alocadas para um dos desenvolvedores do time
      - a iteração termina quando as histórias definidas para a iteração tiverem sido terminada e, assim, são mostradas ao representante do cliente para validação
        
    - slack (folgas)
      - são tarefas que podem ser adiadas caso necessário
        - estudar uma nova tecnologia, 
        - realização de um curso online,
        - preparar uma documentação ou manual,
        - desenvolver um projeto paralelo
      - objetivos das folgas
        - criar um buffer de segurança em uma iteração que possa ser usado caso alguma tarefa demande mais tempo do que o previsto
        - permitir que os desenvolvedores respirem um pouco

  - Práticas de programação
    - design incremental,
      -  o design não deve ser realizado apenas no início do projeto e quando ele se revelar importante
      - "faça a coisa mais simples que possa funcionar" (do the simplest thing that could possibly work)
      - "você não vai precisar disso" (you aren't going to neet it)
      - é compreendido pelo XP que a refatoração do código e do design devem ser feitas sempre que existir a possibilidade
        
    - programação em pares, 
      - toda atividade de codificação deve ser realizada por dois desenvolvedores que compartilham o mesmo teclado e mouse
      - um dos desenvolvedores é o líder (driver), ficando com o teclado e mouse
      - o segundo desenvolvedor é chamado de navegador
      - "duas cabeças pensam mais que uma"
      - compartilhamento de conhecimento sobre as tecnologias e também sobre o sistema em si
      - a cada 50 min deverá ser invertida a posição dos desenvolvedores com um tempo de descanso entre as sessões
      - atualmente muitas empresas passaram a adotar a prática de revisão de código, a ideia é que todo código produzido por um desenvolvedor tem que ser revisado e comentado por outro de forma offline e assíncrona
        
    - propriedade coletiva do código,
      - todo desenvolvedor pode modificar o código que quiser/precisar para melhorias, correção de bugs e refatorações
      - em minha opnião isso funciona apenas e somente quando se tem testes garantindo que o comportamento do código será corretamente mantido
    
    - testes automatizados,
      - anteriormente os testes eram feitos manualmente por humanos inserindo entradas e verificando as saídas do sistema
      - entretando essa abordagem é custosa e não é possível "rodar" os testes a todo momento garantindo que as entradas sejam as mesmas
      - testes automatizados são programas que rodam verificando o código/interface de maneira padronizada garantindo sempre as mesmas entradas e validando corretamente as saídas
    
    - desenvolvimento dirigido por testes (TDD) (teste-frist programming),
      - se em XP todo método deve possuir testes, por que não escrevê-los primeiro?
      - motivações
        - evitar que a escrita de testes seja sempre deixada para amanhã
        - ao escrever um teste, o desenvolvedor se coloca no papel do cliente do método testados, ele pensa inicialmente na sua interface e como o cliente deve usá-lo

    - build automatizado, 
      - build é o nome que se dá para a geração de uma versao de um sistema que seja executável e que possa ser colocada em produção
      - inclui compilação do código, execução de otras ferramentas como linkeditores e empacoadores de código
      - para o XP, a execução dos testes é outra etapa fundamental do processo de build
      - objetivo principal é liberar desenvolvedores para gerar mais valor desenvolvendo histórias
        
    - integração contínua
      - objetivo da integração contínua é a redução de conflitos entre desenvolvedores
      - para isso recomenda-se justamente a integração contínua, todos os dias, para que os desenvolvedores trabalhem o menos possível localmente em suas máquinas
      - serviços de integração contínua auxiliam nesse processo rodando scripts e testes antes de casa integração para garantir que não existirão erros de compilação ou outros erros de regra de negócio

  - Práticas de Gerenciamento de Projetos
    - amiente de trabalho,
      - times pequenos de até 10 desenvolvedores mútuos,
      - jornada de trabalho padrão de 40 horas e sem horas extras e prazos apertados ao final de projetos com entregas próximas

    - contratos com escopo aberto,
      - em casos de empresas terceirizarem o desenvolvimento é indicado pela XP firmar um contrato de escopo aberto visando a maior facilidade de mudança por parte de ambas as empresas
      - os requisitos podem mudar, o que a empresa contratante quer pode mudar e caso o serviço não esteja sendo prestado de maneira satisfatória pode-se ainda trocar de empresa terceirizada mais facilmente
      - normalmente são contratos firmados em horas de desenvolvimento

    - métricas,
      - para que os gerentes e executivos possam acompanhar um projeto XP recomenda-se o uso de duas métricas
        - número de bugs em produção (que deve ser idealmente da ordem de poucos bugs por ano)
        - intervalo de tempo entre o início do desenvolvimento e o momento em que o projeto começar a gerar os seus primeiros resultados financeiros
### Scrum
  - É um método ágil, iterativo e incremental para gerenciamento de projetos.

  - Scrum vs XP
    - XP é um método ágil voltado exclusivamente para projetos de desenvolvimento de software. Para isso, XP inclui um conjunto de práticas de programação
      - testes de unidade, programação em pares, integração contínua e design incremental
    - Scrum é um método ágil para gerenciamento de projetos, que não necessariamente precisam ser projetos de desenvolvimeno de software.

  - Scrum é também aquele que é melhor definido. Essa definição inclui um conjunto preciso de papéis, artefatos e eventos
    - papéis (times scrum são formados por un Product Owner, scrum master e de três a nove desenvolvedores)
      - dono do produto,
        - exatamente o mesmo papel do representante dos clientes em xp
        - como o próprio nome indica, deve possuir a visão do produto que será costruído, sendo responsável também por maximizar o retorno do investimento no projeto
        - Como em XP, cabe ao dono do produto escrever as histórias dos usuários e, por isso, ele deve estar sempre disponível para tirar dúvidas do time

      - scrum master,
        - especialista em Scrum do time, responsável por garantir que as regras do métodos sejam seguidas
        - deve treinar e explicar os princípios de scrum para os demais membros do time
        - deve desempenhar funções de um facilitador dos trabalhos e removedor de impedimentos
        - costuma-se dizer que times.... continua

      - desenvolvedor
    - artefatos
      - backlog do produto,
      - backlog do sprint,
      - quadro scrum,
      - gráfico de burndown
    - eventos
      - planejamento da sprint,
      - sprint,
      - reuniões diárias,
      - revisão do sprint,
      - retrospectiva